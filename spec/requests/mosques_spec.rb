require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/mosques", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Mosque. As you add validations to Mosque, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: "Test Mosque",
      description: "A mosque for testing purposes"
    }
  }

  let(:invalid_attributes) {
    {
      name: nil
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Mosque.create! valid_attributes
      get mosques_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      mosque = Mosque.create! valid_attributes
      get mosque_url(mosque)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_mosque_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      mosque = Mosque.create! valid_attributes
      get edit_mosque_url(mosque)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Mosque" do
        expect {
          post mosques_url, params: { mosque: valid_attributes }
        }.to change(Mosque, :count).by(1)
      end

      it "redirects to the created mosque" do
        post mosques_url, params: { mosque: valid_attributes }
        expect(response).to redirect_to(mosque_url(Mosque.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Mosque" do
        expect {
          post mosques_url, params: { mosque: invalid_attributes }
        }.to change(Mosque, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post mosques_url, params: { mosque: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: "Updated Mosque Name", description: "Updated description for testing purposes" }
      }

      it "updates the requested mosque" do
        mosque = Mosque.create! valid_attributes
        patch mosque_url(mosque), params: { mosque: new_attributes }
        mosque.reload
        expect(mosque.attributes).to include(new_attributes.stringify_keys)
      end

      it "redirects to the mosque" do
        mosque = Mosque.create! valid_attributes
        patch mosque_url(mosque), params: { mosque: new_attributes }
        mosque.reload
        expect(response).to redirect_to(mosque_url(mosque))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        mosque = Mosque.create! valid_attributes
        patch mosque_url(mosque), params: { mosque: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested mosque" do
      mosque = Mosque.create! valid_attributes
      expect {
        delete mosque_url(mosque)
      }.to change(Mosque, :count).by(-1)
    end

    it "redirects to the mosques list" do
      mosque = Mosque.create! valid_attributes
      delete mosque_url(mosque)
      expect(response).to redirect_to(mosques_url)
    end
  end
end
